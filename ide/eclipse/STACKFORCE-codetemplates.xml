<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="false" context="org.eclipse.cdt.core.cSource.contenttype_context" deleted="false" description="" enabled="true" name="STACKFORCE">#ifdef __cplusplus
extern "C"
{
#endif
${filecomment}
/*==============================================================================
 |                               INCLUDE FILES
 =============================================================================*/
/*! definition of portable data types */
#include &lt;stdint.h&gt;
/*! Common definitions most notably NULL */
#include &lt;stddef.h&gt;
${includes}
/*! Define the "external include guard" before including the module header */
#define __DECL_EXAMPLE_H__
#include "${file_base}.h"

/*==============================================================================
 |                                   MACROS
 =============================================================================*/
/*! Add comment for macro */
#define EXAMPLE_MAX_VALUE    0x05U
/*! Add comment for macro */
#define EXAMPLE_VALUE        0xFFU

/*==============================================================================
 |                                   ENUMS
 =============================================================================*/

/*==============================================================================
 |                       STRUCTURES AND OTHER TYPEDEFS
 =============================================================================*/

/*==============================================================================
 |                        LOCAL VARIABLE DECLARATIONS
 =============================================================================*/

/*==============================================================================
 |                              LOCAL CONSTANTS
 =============================================================================*/

/*==============================================================================
 |                         LOCAL FUNCTION PROTOTYPES
 =============================================================================*/
static uint8_t
loc_functionInternal(uint8_t c_param1, uint16_t* pi_param2);

/*==============================================================================
 |                              LOCAL FUNCTIONS
 =============================================================================*/

/*!=============================================================================
 * @brief    This is just an example function header of an internal function
 *
 *           Local functions are always declared "static". This allows the
 *           compiler to issue a warning, when the function is not used.
 *
 *           Declaration of the function name can be anything, as long as it
 *           makes sense.
 *
 *           Between the function name and the opening paranthesis '(' it is
 *           good to type a space. Then it is easy to find in the file.
 *
 * @param    c_param1    This is the first parameter.
 * @param    pi_param2   And here we go for the second one.
 *
 * @return          The return values may range from 0 to 255.
 * @return   0xFF   In case of a special return value an additional description
 *           may be written.
 *
 ============================================================================*/
static uint8_t loc_functionInternal(uint8_t c_param1, uint16_t* pi_param2)
{
    uint8_t c_return = 0x00;
    /*
     * This is a multi-line comment that exceeds the length of 80 letters in
     * a line. Therefore the use of a multiline comment is used here, where
     * it is made sure, that the line break is not further than the margin of
     * 80 characters.
     */
    if ((c_param1 &gt; EXAMPLE_MAX_VALUE) &amp;&amp; (pi_param2 != NULL))
    {
        /* This is just a short comment fitting on a single line */
        c_return = EXAMPLE_VALUE;
    }

    return c_return;
}

/*==============================================================================
 |                               API FUNCTIONS
 =============================================================================*/

uint8_t sf_example_functionApi(uint8_t c_param1, uint16_t* pi_param2)
{
    uint8_t c_return = 0xFF;

    return c_return;
}

void sf_example_functionApi2(uint8_t c_param1, uint16_t* pi_param2)
{

    return;
}

#ifdef __cplusplus
}
#endif
</template></templates>